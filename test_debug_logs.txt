============================= test session starts ==============================
platform linux -- Python 3.12.5, pytest-8.4.0, pluggy-1.6.0
rootdir: /home/chase/Projects/wove
configfile: setup.cfg
plugins: cov-6.2.1, anyio-4.9.0, asyncio-1.1.0, django-4.11.1
asyncio: mode=Mode.AUTO, asyncio_default_fixture_loop_scope=None, asyncio_default_test_loop_scope=function
collected 35 items

tests/test_core.py .......                                               [ 20%]
tests/test_debug.py ......                                               [ 37%]
tests/test_mapping.py ..........FF...                                    [ 80%]
tests/test_merge.py .......                                              [100%]

=================================== FAILURES ===================================
_____________________ test_mapping_over_async_task_result ______________________

    @pytest.mark.asyncio
    async def test_mapping_over_async_task_result():
        """Tests mapping over the result of a preceding async task."""
>       async with weave() as w:

tests/test_mapping.py:200: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
wove/context.py:285: in __aexit__
    task.result()  # This re-raises the exception
    ^^^^^^^^^^^^^
wove/context.py:222: in _time_wrapper
    return await awaitable
           ^^^^^^^^^^^^^^^
wove/context.py:213: in _context_wrapper
    return await target_coro
           ^^^^^^^^^^^^^^^^^
wove/helpers.py:27: in run_in_executor
    return await loop.run_in_executor(None, lambda: func(*args, **kwargs))
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
../../.pyenv/versions/3.12.5/lib/python3.12/concurrent/futures/thread.py:58: in run
    result = self.fn(*self.args, **self.kwargs)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   return await loop.run_in_executor(None, lambda: func(*args, **kwargs))
                                                    ^^^^^^^^^^^^^^^^^^^^^
E   TypeError: test_mapping_over_async_task_result.<locals>.mapped_task() got an unexpected keyword argument 'source_task'

wove/helpers.py:27: TypeError
______________________ test_mapping_over_sync_task_result ______________________

    @pytest.mark.asyncio
    async def test_mapping_over_sync_task_result():
        """Tests mapping over the result of a preceding sync task."""
>       async with weave() as w:

tests/test_mapping.py:217: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <wove.context.WoveContextManager object at 0x7c23c2421b80>
exc_type = None, exc_val = None, exc_tb = None

    async def __aexit__(
        self,
        exc_type: Optional[Type[BaseException]],
        exc_val: Optional[BaseException],
        exc_tb: Optional[Any],
    ) -> None:
        """
        Exits the context, executes all registered tasks, and populates the
        result container.
        If an exception is raised within the `async with` block, task execution
        is skipped. If a task raises an exception during execution, all other
        running tasks are cancelled, and the exception is propagated.
        Args:
            exc_type: The type of exception raised in the block, if any.
            exc_val: The exception instance raised, if any.
            exc_tb: The traceback for the exception, if any.
        """
        if exc_type:
            # If an exception occurred inside the block, don't execute
            return
        self._build_graph_and_plan()
        if self._debug:
            self._print_debug_report()
        # Extract plan details for execution
        tiers = self.execution_plan["tiers"]
        dependencies = self.execution_plan["dependencies"]
        # 4. Execute tier by tier
        all_created_tasks: Set[asyncio.Future[Any]] = set()
        async def _context_wrapper(target_coro: Coroutine[Any, Any, Any]) -> Any:
            """Sets the merge_context and runs the given coroutine."""
            token = merge_context.set(self._merge)
            try:
                return await target_coro
            finally:
                merge_context.reset(token)
        async def _time_wrapper(
            awaitable: Coroutine[Any, Any, Any], task_name: str
        ) -> Any:
            """Wraps an awaitable to measure its execution time."""
            start_time = time.monotonic()
            try:
                return await awaitable
            finally:
                duration = time.monotonic() - start_time
                self.result._add_timing(task_name, duration)
        try:
            for tier in tiers:
                tier_tasks: Dict[asyncio.Future[Any], str] = {}
                for task_name in tier:
                    task_info = self._tasks[task_name]
                    task_func = task_info["func"]
                    args = {p: self.result._results[p] for p in dependencies[task_name]}
                    if not inspect.iscoroutinefunction(task_func):
                        task_func = sync_to_async(task_func)
                    if task_info["map_source"] is not None:
                        # Mapped Task: Create a task for each item and gather results.
                        item_param = task_info["item_param"]
                        map_sub_tasks = []
                        map_source_value = task_info["map_source"]
                        iterable = None
                        if isinstance(map_source_value, str):
                            # The map source is the name of another task. Resolve its result.
                            iterable = self.result._results[map_source_value]
                            try:
                                iter(iterable)
                            except TypeError:
                                raise TypeError(
                                    f"Task '{task_name}' is mapped over the result of "
                                    f"task '{map_source_value}', but its result of type "
                                    f"'{type(iterable).__name__}' is not iterable."
                                )
                        else:
                            # The map source is a static iterable.
                            iterable = map_source_value
                        for item in iterable:
                            map_args = args.copy()
                            map_args[item_param] = item
>                           coro = task_func(**map_args)
                                   ^^^^^^^^^^^^^^^^^^^^^
E                           TypeError: test_mapping_over_sync_task_result.<locals>.mapped_task() got an unexpected keyword argument 'source_task'

wove/context.py:258: TypeError
=========================== short test summary info ============================
FAILED tests/test_mapping.py::test_mapping_over_async_task_result - TypeError...
FAILED tests/test_mapping.py::test_mapping_over_sync_task_result - TypeError:...
========================= 2 failed, 33 passed in 0.42s =========================
