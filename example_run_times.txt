--- Timing API Aggregator Example ---
--- Running API Aggregator Example ---
Found 50 item IDs to process.
All item details fetched.

Total execution time: 0.02 seconds
Final summary: Successfully aggregated data for 50 items.
--- API Aggregator Example Finished ---

real	0m0.074s
user	0m0.047s
sys	0m0.010s
\n
--- Timing Dynamic Workflow Example ---
--- Running Dynamic Workflow Example ---
Fetching data for user 1...
Processing special admin privileges for user 1...
Fetching data for user 2...
Generating standard report for user 2...
Result for User 1 (Admin): Processed admin: 1
Result for User 2 (User):  Generated report for user: 2
--- Dynamic Workflow Example Finished ---

real	0m0.049s
user	0m0.041s
sys	0m0.007s
\n
--- Timing Error Handling Example ---
--- Running Error Handling Example ---
-> long_task started, will sleep for 2 seconds...
!! failing_task is about to raise an exception.
<- long_task was cancelled as expected.

Successfully caught expected exception: Something went wrong in a task
--- Error Handling Example Finished ---

real	0m0.149s
user	0m0.038s
sys	0m0.010s
\n
--- Timing ETL Pipeline Example ---
--- Running Dynamic ETL Pipeline Example ---
-> [E] Extracting source data...
<- [E] Source data extracted (50 records).
-> [T] Dispatcher started. Grouping data by type...
   - Found 10 premium users and 40 standard users.
  [T] Transforming PREMIUM user 0...
  [T] Transforming PREMIUM user 5...
  [T] Transforming PREMIUM user 10...
  [T] Transforming PREMIUM user 15...
  [T] Transforming PREMIUM user 20...
  [T] Transforming PREMIUM user 25...
  [T] Transforming PREMIUM user 30...
  [T] Transforming PREMIUM user 35...
  [T] Transforming PREMIUM user 40...
  [T] Transforming PREMIUM user 45...
  [T] Transforming standard user 1...
  [T] Transforming standard user 2...
  [T] Transforming standard user 3...
  [T] Transforming standard user 4...
  [T] Transforming standard user 6...
  [T] Transforming standard user 7...
  [T] Transforming standard user 8...
  [T] Transforming standard user 9...
  [T] Transforming standard user 11...
  [T] Transforming standard user 12...
  [T] Transforming standard user 13...
  [T] Transforming standard user 14...
  [T] Transforming standard user 16...
  [T] Transforming standard user 17...
  [T] Transforming standard user 18...
  [T] Transforming standard user 19...
  [T] Transforming standard user 21...
  [T] Transforming standard user 22...
  [T] Transforming standard user 23...
  [T] Transforming standard user 24...
  [T] Transforming standard user 26...
  [T] Transforming standard user 27...
  [T] Transforming standard user 28...
  [T] Transforming standard user 29...
  [T] Transforming standard user 31...
  [T] Transforming standard user 32...
  [T] Transforming standard user 33...
  [T] Transforming standard user 34...
  [T] Transforming standard user 36...
  [T] Transforming standard user 37...
  [T] Transforming standard user 38...
  [T] Transforming standard user 39...
  [T] Transforming standard user 41...
  [T] Transforming standard user 42...
  [T] Transforming standard user 43...
  [T] Transforming standard user 44...
  [T] Transforming standard user 46...
  [T] Transforming standard user 47...
  [T] Transforming standard user 48...
  [T] Transforming standard user 49...
<- [T] All transformations complete.
-> [L] Loading data into destination...
<- [L] Loaded 50 records.

Total execution time: 0.08 seconds
Final status: {'status': 'complete', 'records_loaded': 50}
--- Dynamic ETL Pipeline Example Finished ---

real	0m0.133s
user	0m0.045s
sys	0m0.013s
\n
--- Timing Django-style (example.py) Example ---
--- Running Django-style Example for Post 101 ---
-> Dynamically fetching admin permissions for user 1...

Final Response (Admin Author):
{
  "id": 101,
  "title": "Wove in Action",
  "author_id": 1,
  "author": {
    "id": 1,
    "username": "admin_user",
    "email": "admin@example.com",
    "is_admin": true,
    "permissions": [
      "create_post",
      "delete_post",
      "edit_user"
    ]
  },
  "comments": [
    {
      "author_name": "jane_doe",
      "text": "Great post!"
    },
    {
      "author_name": "some_user",
      "text": "Very informative."
    }
  ]
}
--- Running Django-style Example for Post 102 ---

Final Response (Non-Admin Author):
{
  "id": 102,
  "title": "Another Post",
  "author_id": 2,
  "author": {
    "id": 2,
    "username": "jane_doe",
    "email": "jane@example.com",
    "is_admin": false
  },
  "comments": []
}

--- Django-style Example Finished ---

real	0m0.112s
user	0m0.042s
sys	0m0.010s
\n
--- Timing ML Pipeline Example ---
--- Running ML Pipeline Example ---
-> [1] Loading raw data...
<- [1] Raw data loaded (200000 records).
-> [2b] Engineering statistical features...
-> [2a] Engineering polynomial features...
<- [2b] Statistical features engineered.
<- [2a] Polynomial features engineered.
-> [3] Training model with combined features...
<- [3] Model trained with 200000 poly features and 200000 stat features.

Total execution time: 0.11 seconds
Final model status: {'status': 'trained', 'poly_feature_count': 200000, 'stat_feature_count': 200000}
--- ML Pipeline Example Finished ---

real	0m0.169s
user	0m0.092s
sys	0m0.027s
